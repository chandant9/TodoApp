{"version":3,"sources":["Todolist.js","TodosData.js","App.js","serviceWorker.js","index.js"],"names":["Todolist","props","className","type","checked","todosData","completed","onChange","handleChange","id","style","fontType","color","textDecoration","text","App","state","todos","bind","this","setState","prevState","map","todo","todoitems","item","key","borderStyle","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAoBeA,MAjBf,SAAkBC,GAMjB,OACC,yBAAKC,UAAY,aAChB,2BAAOC,KAAK,WACZC,QAAWH,EAAMI,UAAUC,UAC3BC,SAAY,kBAAMN,EAAMO,aAAaP,EAAMI,UAAUI,OAErD,wBAAIC,MAAST,EAAMI,UAAUC,UAXV,CACpBK,SAAU,SACVC,MAAO,UACPC,eAAgB,gBAQyC,MAAOZ,EAAMI,UAAUS,QCanET,EA5BG,CACd,CACII,GAAI,EACJK,KAAM,qBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,WACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mCACNR,WAAW,ICqBJS,E,kDAxCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAOZ,GAET,EAAKG,aAAe,EAAKA,aAAaU,KAAlB,gBALR,E,yDAQDT,GACXU,KAAKC,UAAS,SAAAC,GAUZ,MAAO,CACLJ,MAVmBI,EAAUJ,MAAMK,KAAI,SAAAC,GACvC,OAAGA,EAAKd,KAAMA,EACL,2BACFc,GADL,IAEEjB,WAAWiB,EAAKjB,YAGbiB,W,+BAQJ,IAAD,OACAC,EAAYL,KAAKH,MAAMC,MAAMK,KAAI,SAAAG,GAAI,OAAI,kBAAC,EAAD,CAAUC,IAAKD,EAAKhB,GAAIJ,UAAaoB,EAAMjB,aAAgB,EAAKA,kBAK/G,OACE,yBAAKE,MALW,CAChBiB,YAAa,iBACbf,MAAO,QAGkBV,UAAW,QAClC,wCACCsB,O,GAnCSI,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6e7ac8c1.chunk.js","sourcesContent":["import React from 'react'\r\nimport App from './App.css'\r\n\r\nfunction Todolist(props) {\r\n\tconst displayStyle = {\r\n\t\tfontType: \"italic\",\r\n\t\tcolor: \"#cdcdcd\",\r\n\t\ttextDecoration: \"line-through\"\r\n\t}\r\n\treturn (\r\n\t\t<div className = 'item-list'>\r\n\t\t\t<input type=\"checkbox\" \r\n\t\t\tchecked = {props.todosData.completed}\r\n\t\t\tonChange = {() => props.handleChange(props.todosData.id)}\r\n\t\t/>\r\n\t\t\t<h2 style = {props.todosData.completed ? displayStyle : null}>{props.todosData.text}</h2>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Todolist","const todosData = [\r\n    {\r\n        id: 1,\r\n        text: \"Take out the trash\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Clean gecko tank\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Mow lawn\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Catch up on Arrested Development\",\r\n        completed: false\r\n    }\r\n]\r\n\r\nexport default todosData","import React from 'react';\nimport Todolist from './Todolist'\nimport todosData from './TodosData'\n\nclass App extends React.Component{\n  constructor() {\n    super()\n    this.state = {\n      todos: todosData,\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(id) {\n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n        if(todo.id ===id){\n          return {\n            ...todo,\n            completed:!todo.completed  \n          }\n        }\n        return todo\n      })\n      return {\n        todos: updatedTodos\n      }\n    })\n\n  }\n  render(){\n    const todoitems = this.state.todos.map(item => <Todolist key={item.id} todosData = {item} handleChange = {this.handleChange} />)\n    const todoStyle = {\n      borderStyle: \"2px solid grey\",\n      color: \"#762\"\n    }\n    return(\n      <div style = {todoStyle} className= \"head\">\n        <h1>Buy list</h1> \n        {todoitems} \n      </div>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}